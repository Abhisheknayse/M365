$passwords = Import-Csv -Path "C:\Abhishek Nayse\Random_Password.csv"

# Function to get a random password from the CSV file
function Get-RandomPassword {
    $randomIndex = Get-Random -Minimum 0 -Maximum $passwords.Count
    return $passwords[$randomIndex].Password
}

try {
    # Prompt for new user details
    $FirstName = Read-Host "Enter the first name"
    $LastName = Read-Host "Enter the last name"
    $Domain = "external.vorwerk.com"
    $Email = Read-Host "Enter the email address"
    $RITM = Read-host "Enter the RITM no."
    $ReferenceIDProvided = Read-Host "Is there a reference user? (yes/no)"
    
    $ReferenceUser = if ($ReferenceIDProvided -eq "yes") { Read-Host "Enter the reference user" } else { "" }
    
    $Password = Get-RandomPassword

    # Calculate the necessary parts of the first and last names
    $LastNamePart = $LastName.Substring(0, [math]::Min($LastName.Length, 7))
    $RemainingCharsNeeded = 7 - $LastNamePart.Length
    $FirstNamePart = $FirstName.Substring(0, [math]::Min($FirstName.Length, $RemainingCharsNeeded))

    # Combine the parts to form the SamAccountName
    $SamAccountName = "cyb-" + $LastNamePart + $FirstNamePart

    # Output the SamAccountName
    $SamAccountName

    # Properly format the name string
    $FormattedName = "$LastName, $FirstName (CyberArk)"

    # Create the new user
    New-ADUser -Name $FormattedName `
    -SamAccountName $SamAccountName `
    -UserPrincipalName ("cyb." + $FirstName + "." + $LastName + "@" + $Domain) `
    -Path "OU=Test,OU=Test,OU=Cognizant,DC=emea,DC=vorwerk,DC=org" `
    -AccountPassword (ConvertTo-SecureString -AsPlainText $Password -Force) `
    -Enabled $true `
    -GivenName $FirstName `
    -Surname $LastName `
    -DisplayName $FormattedName `
    -ChangePasswordAtLogon $false


    if ($ReferenceUser -ne "") {
        $ReferenceUserGroups = Get-ADUser -Identity $ReferenceUser -Property MemberOf | Select-Object -ExpandProperty MemberOf

        # Add the new user to the same groups one by one
        foreach ($group in $ReferenceUserGroups) {
            try {
                # Search in the first base
                $GroupInfo = Get-ADGroup -Filter { Name -eq $group.Split(",")[0].Split("=")[-1] } -SearchBase "DC=vorwerk,DC=org" -SearchScope Subtree
                if (-not $GroupInfo) {
                    # If not found, search in the second base
                    $GroupInfo = Get-ADGroup -Filter { Name -eq $group.Split(",")[0].Split("=")[-1] } -SearchBase "DC=emea,DC=vorwerk,DC=org" -SearchScope Subtree
                }
                if ($GroupInfo) {
                    Add-ADGroupMember -Identity $GroupInfo.DistinguishedName -Members $SamAccountName
                } else {
                    Write-Output "Group $group not found in either directory"
                }
            }
            catch {
                Write-Output "Failed to add $SamAccountName to group $group"
            }
        }
        # Add the new user to the compulsory group
    Add-ADGroupMember -Identity "_gs_MFA_Enabled_CyberArk_Users" -Members $SamAccountName
    Write-Output "$SamAccountName successfully added to _gs_MFA_Enabled_CyberArk_Users"
    }

# Compose the email body
$emailBody = @"
Hello $FirstName $LastName

As per request, CyberArk account has been created and credential are mentioned below.

Display Name : $Formatted
UPN : cyb.$FirstName.$LastName@$Domain
Logon ID : $SamAccountName
Password : $Password

Thanks
Abhishek Nayse.
"@
Send-MailMessage -From test.healthcheck2@external.vorwerk.com -To $Email -Subject "Reg." $RITM -Body $emailBody -SmtpServer vwdcpv-msdta204 -Port 25



try {
    # Send email with delivery and read receipt request
    $mailMessage.Headers.Add("Disposition-Notification-To", $From)
    $mailMessage.Headers.Add("Return-Receipt-To", $From)
    Write-Host "Email sent successfully."
} catch {
    # If there is an error, send an alert email
    Write-Host "Failed to send email. Sending alert email."
    Send-MailMessage -From test.healthcheck2@external.vorwerk.com -To abhishek.sandeepraonayse@cognizant.com -Subject "Email Delivery Failure" -Body "The email to $To could not be delivered." -SmtpServer $SmtpServer -Port 25
}
